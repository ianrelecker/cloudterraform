import azure.functions as func
import logging
import os
import json
import requests
import pyodbc
from datetime import datetime, timedelta
from azure.storage.queue import QueueClient

app = func.FunctionApp()

@app.function_name(name="NVDIngestion")
@app.timer_trigger(schedule="0 0 */2 * * *", arg_name="mytimer", run_on_startup=False,
              use_monitor=False) 
def nvd_ingestion(mytimer: func.TimerRequest) -> None:
    """
    Timer trigger function that runs every 2 hours to fetch CVEs from NVD API
    """
    logging.info('NVD Ingestion function started')
    
    # Get configuration from environment variables
    nvd_api_key = os.environ.get('NVD_API_KEY')
    sql_connection_string = os.environ.get('SQL_CONNECTION_STRING')
    storage_connection_string = os.environ.get('STORAGE_CONNECTION_STRING')
    queue_name = os.environ.get('CVE_PROCESSING_QUEUE_NAME', 'cve-processing-queue')
    
    # NVD API configuration
    nvd_base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    headers = {'apiKey': nvd_api_key} if nvd_api_key else {}
    
    # Calculate date range (last 24 hours to catch any updates)
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(hours=24)
    
    try:
        # Fetch CVEs from NVD API
        params = {
            'pubStartDate': start_date.strftime('%Y-%m-%dT%H:%M:%S.000'),
            'pubEndDate': end_date.strftime('%Y-%m-%dT%H:%M:%S.000'),
            'resultsPerPage': 100
        }
        
        logging.info(f"Fetching CVEs from {start_date} to {end_date}")
        response = requests.get(nvd_base_url, headers=headers, params=params, timeout=30)
        response.raise_for_status()
        
        nvd_data = response.json()
        vulnerabilities = nvd_data.get('vulnerabilities', [])
        
        logging.info(f"Found {len(vulnerabilities)} CVEs to process")
        
        # Connect to Storage Queue
        queue_client = QueueClient.from_connection_string(
            storage_connection_string, queue_name
        )

        conn = None
        try:
            conn = pyodbc.connect(sql_connection_string)
            cursor = conn.cursor()
            
            processed_count = 0
            for vuln in vulnerabilities:
                cve_data = vuln.get('cve', {})
                cve_id = cve_data.get('id')
                
                if not cve_id:
                    continue
                    
                # Extract CVE details
                descriptions = cve_data.get('descriptions', [])
                description = next((d['value'] for d in descriptions if d['lang'] == 'en'), 'No description available')
                
                # Get CVSS score if available
                metrics = vuln.get('cve', {}).get('metrics', {})
                cvss_score = None
                severity = 'UNKNOWN'
                
                if 'cvssMetricV31' in metrics:
                    cvss_data = metrics['cvssMetricV31'][0]['cvssData']
                    cvss_score = cvss_data.get('baseScore')
                    severity = cvss_data.get('baseSeverity', 'UNKNOWN')
                elif 'cvssMetricV2' in metrics:
                    cvss_data = metrics['cvssMetricV2'][0]['cvssData']
                    cvss_score = cvss_data.get('baseScore')
                    # Map V2 score to severity
                    if cvss_score >= 7.0:
                        severity = 'HIGH'
                    elif cvss_score >= 4.0:
                        severity = 'MEDIUM'
                    else:
                        severity = 'LOW'
                
                published_date = cve_data.get('published')
                modified_date = cve_data.get('lastModified')
                
                # Insert or update CVE in database
                try:
                    cursor.execute("""
                        MERGE CVEs AS target
                        USING (VALUES (?, ?, ?, ?, ?, ?)) AS source (CVE_ID, Description, Severity, CVSS_Score, Published_Date, Modified_Date)
                        ON target.CVE_ID = source.CVE_ID
                        WHEN MATCHED THEN
                            UPDATE SET Description = source.Description, Severity = source.Severity, 
                                     CVSS_Score = source.CVSS_Score, Modified_Date = source.Modified_Date
                        WHEN NOT MATCHED THEN
                            INSERT (CVE_ID, Description, Severity, CVSS_Score, Published_Date, Modified_Date)
                            VALUES (source.CVE_ID, source.Description, source.Severity, source.CVSS_Score, source.Published_Date, source.Modified_Date);
                    """, cve_id, description, severity, cvss_score, published_date, modified_date)
                    
                    # Queue CVE for SOC analysis
                    queue_message = {
                        'cve_id': cve_id,
                        'severity': severity,
                        'cvss_score': cvss_score,
                        'timestamp': datetime.utcnow().isoformat(),
                        'action': 'soc_analysis'
                    }
                    
                    queue_client.send_message(json.dumps(queue_message))
                    processed_count += 1
                    
                except Exception as e:
                    logging.error(f"Error processing CVE {cve_id}: {str(e)}")
                    continue
            
            conn.commit()
        finally:
            if conn:
                conn.close()
        
        logging.info(f"Successfully processed {processed_count} CVEs")
        
    except Exception as e:
        logging.error(f"NVD Ingestion failed: {str(e)}")
        raise
