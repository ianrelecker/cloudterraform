import azure.functions as func
import logging
import os
import json
import pyodbc
from datetime import datetime
from anthropic import Anthropic

app = func.FunctionApp()

@app.function_name(name="SOCProcessor")
@app.queue_trigger(arg_name="msg", queue_name="cve-processing-queue",
                   connection="STORAGE_CONNECTION_STRING")
def soc_processor(msg: func.QueueMessage) -> None:
    """
    Queue trigger function that processes CVEs for SOC analysis using Claude API
    """
    logging.info('SOC Processor function started')
    
    # Get configuration
    claude_api_key = os.environ.get('CLAUDE_API_KEY')
    sql_connection_string = os.environ.get('SQL_CONNECTION_STRING')
    
    if not claude_api_key:
        logging.error('CLAUDE_API_KEY not configured')
        return
    
    try:
        # Parse queue message
        message_data = json.loads(msg.get_body().decode())
        cve_id = message_data.get('cve_id')
        severity = message_data.get('severity', 'UNKNOWN')
        cvss_score = message_data.get('cvss_score')
        
        logging.info(f'Processing SOC analysis for {cve_id}')
        
        # Get CVE details from database
        conn = None
        try:
            conn = pyodbc.connect(sql_connection_string)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT CVE_ID, Description, Severity, CVSS_Score, Published_Date 
                FROM CVEs WHERE CVE_ID = ?
            """, cve_id)
            
            cve_row = cursor.fetchone()
            if not cve_row:
                logging.error(f'CVE {cve_id} not found in database')
                return
            
            cve_description = cve_row[1]
        finally:
            if conn:
                conn.close()

        # Generate SOC analysis using Claude
        claude_client = Anthropic(api_key=claude_api_key)
        
        soc_prompt = f"""
        Analyze this CVE from a Security Operations Center (SOC) perspective:

        CVE ID: {cve_id}
        Severity: {severity}
        CVSS Score: {cvss_score}
        Description: {cve_description}

        Provide a concise SOC analysis covering:
        1. Threat Assessment (1-2 sentences)
        2. Impact Analysis (1-2 sentences) 
        3. Recommended Actions (3-4 bullet points)
        4. Priority Level (Critical/High/Medium/Low with brief justification)

        Keep the response under 300 words and focus on actionable intelligence for security teams.
        """
        
        try:
            response = claude_client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=400,
                messages=[{"role": "user", "content": soc_prompt}]
            )
            
            soc_analysis = response.content[0].text
            
            # Save SOC analysis to database
            conn = pyodbc.connect(sql_connection_string)
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO SOC_Reports (CVE_ID, SOC_Analysis, Analysis_Date, AI_Model_Used)
                VALUES (?, ?, ?, ?)
            """, cve_id, soc_analysis, datetime.utcnow(), "claude-3-5-sonnet-20241022")
            conn.commit()
            logging.info(f'SOC analysis completed for {cve_id}')
        except Exception as e:
            logging.error(f'Claude API error for {cve_id}: {str(e)}')
            # Save error info
            try:
                conn = pyodbc.connect(sql_connection_string)
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO SOC_Reports (CVE_ID, SOC_Analysis, Analysis_Date, AI_Model_Used)
                    VALUES (?, ?, ?, ?)
                """, cve_id, f"Analysis failed: {str(e)}", datetime.utcnow(), "claude-3-5-sonnet-20241022")
                conn.commit()
            finally:
                if conn:
                    conn.close()
        
    except Exception as e:
        logging.error(f'SOC processing failed: {str(e)}')
        raise
