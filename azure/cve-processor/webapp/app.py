from flask import Flask, render_template_string, jsonify
import pyodbc
import os
import logging
from datetime import datetime

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_db_connection():
    try:
        conn_str = os.environ['SQL_CONNECTION_STRING']
        return pyodbc.connect(conn_str)
    except Exception as e:
        logger.error(f'DB connection failed: {e}')
        return None

@app.route('/')
def index():
    try:
        conn = get_db_connection()
        if not conn:
            return '<h1>CVE Security Blog</h1><p>Database connection failed</p>'
        
        cursor = conn.cursor()
        
        # Get latest CVEs with SOC analysis
        cursor.execute("""
            SELECT TOP 10 
                c.CVE_ID, 
                c.Description, 
                c.Severity, 
                c.CVSS_Score, 
                c.Published_Date,
                s.SOC_Analysis,
                s.Analysis_Date
            FROM CVEs c
            LEFT JOIN SOC_Reports s ON c.CVE_ID = s.CVE_ID
            ORDER BY c.Published_Date DESC
        """)
        
        cves = cursor.fetchall()
        conn.close()
        
        html = '''<!DOCTYPE html>
<html>
<head>
    <title>CVE Security Intelligence Blog</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        h1 { color: #1e3a8a; }
        .cve-card { 
            background: white; 
            margin: 20px 0; 
            padding: 20px; 
            border-radius: 8px; 
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .severity-CRITICAL { border-left: 4px solid #dc2626; }
        .severity-HIGH { border-left: 4px solid #d97706; }
        .severity-MEDIUM { border-left: 4px solid #eab308; }
        .severity-LOW { border-left: 4px solid #059669; }
        .badge { 
            padding: 4px 8px; 
            border-radius: 4px; 
            color: white; 
            font-size: 12px; 
            margin-left: 10px;
        }
        .badge-CRITICAL { background: #dc2626; }
        .badge-HIGH { background: #d97706; }
        .badge-MEDIUM { background: #eab308; }
        .badge-LOW { background: #059669; }
        .soc-analysis { 
            background: #f8f9fa; 
            padding: 15px; 
            margin-top: 15px; 
            border-radius: 5px;
            border-left: 3px solid #007bff;
        }
        .soc-label { 
            font-weight: bold; 
            color: #007bff; 
            margin-bottom: 10px;
        }
        .meta { color: #666; font-size: 14px; margin: 10px 0; }
    </style>
</head>
<body>
    <h1>üõ°Ô∏è CVE Security Intelligence Blog</h1>
    <p>Latest cybersecurity vulnerabilities with AI-powered SOC analysis</p>
'''
        
        if cves:
            html += '<div class="cve-posts">'
            for cve in cves:
                severity = cve[2] or 'UNKNOWN'
                score = f' (CVSS: {cve[3]})' if cve[3] else ''
                pub_date = cve[4].strftime('%B %d, %Y') if cve[4] else 'Unknown'
                soc_analysis = cve[5]
                analysis_date = cve[6].strftime('%B %d, %Y at %H:%M UTC') if cve[6] else None
                
                html += f'''
                <article class="cve-card severity-{severity}">
                    <h2>{cve[0]} <span class="badge badge-{severity}">{severity}{score}</span></h2>
                    <p class="meta">Published: {pub_date}</p>
                    <p>{cve[1][:400]}{'...' if len(cve[1]) > 400 else ''}</p>
                '''
                
                if soc_analysis:
                    html += f'''
                    <div class="soc-analysis">
                        <div class="soc-label">ü§ñ AI SOC Analysis ({analysis_date})</div>
                        <div>{soc_analysis}</div>
                    </div>
                    '''
                else:
                    html += '<div class="soc-analysis"><div class="soc-label">‚è≥ SOC Analysis Pending</div></div>'
                
                html += '</article>'
            
            html += '</div>'
        else:
            html += '<p>No CVEs available yet. Check back after the ingestion function runs!</p>'
        
        html += '''
    <footer style="margin-top: 40px; text-align: center; color: #666;">
        <p>üîÑ NVD ingestion runs every 2 hours | ü§ñ Powered by Claude AI</p>
    </footer>
</body>
</html>'''
        
        return html
        
    except Exception as e:
        logger.error(f'Error: {e}')
        return f'<h1>CVE Security Blog</h1><p>Error: {str(e)}</p>'

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "timestamp": datetime.utcnow().isoformat()})

@app.route('/stats')
def stats():
    try:
        conn = get_db_connection()
        if not conn:
            return jsonify({"error": "Database connection failed"})
        
        cursor = conn.cursor()
        
        # Get statistics
        cursor.execute("SELECT COUNT(*) FROM CVEs")
        total_cves = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM SOC_Reports")
        analyzed_cves = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM CVEs WHERE Severity = 'CRITICAL'")
        critical_cves = cursor.fetchone()[0]
        
        conn.close()
        
        return jsonify({
            "total_cves": total_cves,
            "analyzed_cves": analyzed_cves,
            "critical_cves": critical_cves,
            "analysis_coverage": f"{(analyzed_cves/total_cves*100):.1f}%" if total_cves > 0 else "0%"
        })
        
    except Exception as e:
        return jsonify({"error": str(e)})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000, debug=False)